akka {
  loglevel = DEBUG
  log-config-on-start = off
  log-dead-letters = off

  actor {
    provider = "cluster"

    serialization-bindings {
      "woe.twin.CborSerializable" = jackson-cbor
    }
  }

  cluster {
    sharding {
      number-of-shards = 1024
      passivate-idle-entity-after = 600s # default 120s
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api

        # For the kubernetes API this value is substituted into the %s in pod-label-selector
        service-name = "woe-twin"

        required-contact-point-nr = 2
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
    http.route-providers-read-only = false
  }

  persistence {
    max-concurrent-recoveries = 1000

    journal-plugin-fallback {
    # recovery-event-timeout = 120s
    }
  }

  projection {
    recovery-strategy {
      strategy = retry-and-fail
      retries = 5
      retry-delay = 1 s
    }
    restart-backoff {
      min-backoff = 5s
      max-backoff = 30s
      random-factor = 0.2
    }
    jdbc {
      dialect = "postgres-dialect"

      blocking-jdbc-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
          # Use same number of threads as connections in the JDBC connection pool.
          fixed-pool-size = 10  # see woe.twin.sql.max-pool-size
          # TODO waiting for bug fix - fixed-pool-size = ${?device_projection_jdbc_pool_size}
        }
        throughput = 1
      }

      offset-store {
        schema = ""
        table = "AKKA_PROJECTION_OFFSET_STORE"
      }
    }
  }

  http {
    host-connection-pool {
      max-connections = 512 # default 4
      max-open-requests = 4096  # default 32
    }
    server.preview.enable-http2 = on
  }
}

woe {
  simulator.http.server {
    host = "localhost"
    host = ${?woe_simulator_http_server_host}
    port = 8080
    port = ${?woe_simulator_http_server_port}
  }
  twin {
    homepage-filename = "woe-wireless-mesh.html"
    homepage-filename = "woe.html"
    homepage-filename = ${homepage_filename}
    projection-shards = 2
    projection-shards = ${?projection_shards}
    http.server {
      host = "localhost"
      host = ${?woe_twin_http_server_host}
      port = 8080
      port = ${?woe_twin_http_server_port}
    }
    grpc.server {
      host = "localhost"
      host = ${?woe_twin_grpc_server_host}
      port = 8081
      port = ${?woe_twin_grpc_server_port}
    }
    sql {
      url = "jdbc:postgresql://127.0.0.1:5433/"
      url = ${?postgresql_url}
      username = "yugabyte"
      username = ${?postgresql_username}
      password = "yugabyte"
      password = ${?postgresql_password}
      max-pool-size = 10  # see akka.projection.jdbc.blocking-jdbc-dispatcher.fixed-pool-size
      # TODO waiting for bug fix - max-pool-size = ${?device_projection_jdbc_pool_size}
    }
    projection {
      group-after-envelopes = 200
      group-after-envelopes = ${?projection_group_after_envelopes}
      group-after-duration = 1s
      group-after-duration = ${?projection_group_after_duration}
    }
    device-entity-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      throughput = 5
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 2.0
        parallelism-max = 64
      }
    }
    query-devices-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      throughput = 1

      thread-pool-executor {
        fixed-pool-size = 50
      }
    }
  }
}

# Uncomment as needed for specific Kubernetes environments
#include "application-minikube-ws-cdb-rs-rdb"
#include "application-minikube-ws-rdb-rs-rdb"
#include "application-eks-ws-cdb-rs-rdb"
include "application-eks-ws-rdb-rs-rdb"
#include "application-gke-ws-cdb-rs-rdb"
#include "application-gke-ws-rdb-rs-rdb"
